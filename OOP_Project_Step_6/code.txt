#include <iostream>
#include <string>

#define STR_LEN 100

using std::cout;
using std::cin;
using std::endl;

enum { CREATE = 1, DEPOSIT, WITHDRAW, SHOWINFO, EXIT };
enum { LEV_A = 7, LEV_B = 4, LEV_C = 2 };
enum { NORMAL = 1, CREDIT = 2 };

class Account {
private:
	int accID; // 중복검사를 하지 않는다.
	char* name;
	int balance; // 입금 및 출금액 검사를 하지 않는다.
public:
	Account(int, const char*, int);
	Account(const Account&);
	~Account();
	int GetAccID() const;
	char* GetName() const;
	int GetBalance() const;
	virtual void Deposit(int);
	int Withdraw(int);
	virtual void ShowAccountInfo() const;
};

Account::Account(int accID, const char* name, int balance)
	: accID(accID), balance(balance)
{
	this->name = new char[strlen(name) + 1];
	strcpy_s(this->name, strlen(name) + 1, name);
}

Account::Account(const Account& account)
{
	name = new char[strlen(account.name) + 1];
	strcpy_s(name, strlen(name) + 1, account.name);
}

Account::~Account()
{
	delete[] name;
}

int Account::GetAccID() const { return accID; }
char* Account::GetName() const { return name; }
int Account::GetBalance() const { return balance; }

void Account::Deposit(int money) { balance += money; }
int Account::Withdraw(int money) { if(balance < money) return 0; else balance -= money; return 1; }

void Account::ShowAccountInfo() const
{
	cout << "계좌ID: " << accID << '\n';
	cout << "이 름: " << name << '\n';
	cout << "잔 액: " << balance << "원\n";
}

class NormalAccount : public Account {
private:
	int basicRate;
public:
	NormalAccount(int accID, const char* name, int balance, int basicRate)
		: Account(accID, name, balance), basicRate(basicRate) { }
	int GetBasicRate() const { return basicRate; }
	virtual void Deposit(int money)
	{
		Account::Deposit(money); // 원금 추가
		Account::Deposit((int)(money*(basicRate / 100.0))); // 이자 추가
	}

	virtual void ShowAccountInfo() const
	{
		cout << "[보통예금계좌]\n";
		cout << "계좌ID: " << GetAccID() << '\n';
		cout << "이 름: " << GetName() << '\n';
		cout << "잔 액: " << GetBalance() << "원\n";
		cout << "이자율: " << basicRate << "%\n";
	}
};

class HighCreditAccount : public NormalAccount {
private:
	int creditRating;
public:
	HighCreditAccount(int accID, const char* name, int balance, int basicRate, int creditRating)
		: NormalAccount(accID, name, balance, basicRate), creditRating(creditRating) { }
	
	virtual void Deposit(int money)
	{
		NormalAccount::Deposit(money); // 원금, 이자 추가
		Account::Deposit((int)(money*(creditRating / 100.0))); // 특별이자 추가
	}

	virtual void ShowAccountInfo() const
	{
		cout << "[신용신뢰계좌]\n";
		cout << "계좌ID: " << GetAccID() << '\n';
		cout << "이 름: " << GetName() << '\n';
		cout << "잔 액: " << GetBalance() << "원\n";
		cout << "이자율: " << GetBasicRate() << "%\n";
		if(creditRating == LEV_A) cout << "신용등급: A(" << LEV_A << "%)\n";
		else if(creditRating == LEV_B) cout << "신용등급: B(" << LEV_B << "%)\n";
		else if(creditRating == LEV_C) cout << "신용등급: C(" << LEV_C << "%)\n";
	}
};

class AccountHandler {
private:
	Account * accountList[STR_LEN];
	int accountNum;
public:
	AccountHandler();
	~AccountHandler();
	void customNormalAccount(const int, const char*, const int, const int);
	void customCreditAccount(const int, const char*, const int, const int, const int);
	int ShowMenu() const; // 메뉴 출력
	void CreateAccount(); // 계좌 생성
	void CreateNormalAccount(); // 보통예금계좌 생성
	void CreateCreditAccount(); // 신용신뢰계좌 생성
	void Deposit(); // 입금
	void Withdraw(); // 출금
	void ShowAccountList() const; // 계좌목록 출력
};

AccountHandler::AccountHandler(): accountNum(0){ }
AccountHandler::~AccountHandler()
{
	for(int i = 0; i < accountNum; i++) {
		delete accountList[i];
	}
}

void AccountHandler::customNormalAccount(int accID, const char* name, int money, int basicRate)
{
	accountList[accountNum++] = new NormalAccount(accID, name, money, basicRate);
}

void AccountHandler::customCreditAccount(int accID, const char* name, int money, int basicRate, int creditRating)
{
	accountList[accountNum++] = new HighCreditAccount(accID, name, money, basicRate, creditRating);
}

int AccountHandler::ShowMenu() const
{
	int ch = 0;
	cout << "-----Menu-----\n";
	cout << "1. 계좌 개설\n";
	cout << "2. 입 금\n";
	cout << "3. 출 금\n";
	cout << "4. 계좌정보 전체 출력\n";
	cout << "5. 프로그램 종료\n";
	cout << "선택>> ";
	cin >> ch;
	return ch;
}

void AccountHandler::CreateAccount()
{
	int ch = 0;
	cout << "\n[계좌종류선택]\n";
	cout << "1. 보통예금계좌\n";
	cout << "2. 신용신뢰계좌\n";
	cout << "선택>> "; cin >> ch;
	if(ch == NORMAL) {
		CreateNormalAccount();
	} else if(ch == CREDIT) {
		CreateCreditAccount();
	} else {
		return CreateAccount();
	}
}

void AccountHandler::CreateNormalAccount()
{
	int accID, balance, basicRate;
	char name[STR_LEN];
	cout << "\n[보통예금계좌 개설]\n";
	cout << "계좌ID: "; cin >> accID;
	cout << "이 름: "; cin >> name;
	cout << "입금액: "; cin >> balance;
	cout << "이자율: "; cin >> basicRate;
	accountList[accountNum++] = new NormalAccount(accID, name, balance, basicRate);
}

void AccountHandler::CreateCreditAccount()
{
	int accID, balance, basicRate, level,creditRating = 0;
	char name[STR_LEN];
	cout << "\n[신용신뢰계좌 개설]\n";
	cout << "계좌ID: "; cin >> accID;
	cout << "이 름: "; cin >> name;
	cout << "입금액: "; cin >> balance;
	cout << "이자율: "; cin >> basicRate;
	do {
		cout << "신용등급(1toA, 2toB, 3toC): "; cin >> level;
		if(level == 1) creditRating = LEV_A;
		else if(level == 2) creditRating = LEV_B;
		else if(level == 3) creditRating = LEV_C;
	} while(creditRating == 0);
	accountList[accountNum++] = new HighCreditAccount(accID, name, balance, basicRate, creditRating);
}

void AccountHandler::Deposit()
{
	int inputID = 0;
	int inputMoney = 0;
	int i;
	cout << "\n[입 금]\n";
	cout << "계좌ID: ";
	cin >> inputID;
	for(i = 0; i < accountNum; i++) {
		if(accountList[i]->GetAccID() == inputID) {
			cout << "이 름: " << accountList[i]->GetName() << '\n';
			cout << "입금액: "; cin >> inputMoney;
			accountList[i]->Deposit(inputMoney);
			cout << "입금완료.\n";
			return;
		}
	}
	cout << "올바른 계좌번호가 아닙니다.\n\n";
	cout << "저장된 계좌번호목록\n";
	for(int i = 0; i < accountNum; i++) {
		cout << "계좌ID: " << accountList[i]->GetAccID() << '\n';
	}
	return Deposit();
}

void AccountHandler::Withdraw()
{
	int inputID = 0;
	int inputMoney = 0;
	int i;
	cout << "\n[출 금]\n";
	cout << "계좌ID: ";
	cin >> inputID;
	for(i = 0; i < accountNum; i++) {
		if(accountList[i]->GetAccID() == inputID) {
			cout << "이 름: " << accountList[i]->GetName() << '\n';
			cout << "출금액(현재 잔액: " << accountList[i]->GetBalance() << "원): "; cin >> inputMoney;
			if(accountList[i]->Withdraw(inputMoney)) {
				cout << "출금완료.\n";
				return;
			} else {
				cout << "잔액이 부족합니다.(현재 잔액: " << accountList[i]->GetBalance() << "원)\n";
				return Withdraw();
			}
			return;
		}
	}
	cout << "올바른 계좌번호가 아닙니다.\n";
	for(int i = 0; i < accountNum; i++) {
		cout << "계좌ID: " << accountList[i]->GetAccID() << '\n';
	}
	return Deposit();
}

void AccountHandler::ShowAccountList() const
{
	cout << "\n---전체 계좌목록---\n";
	for(int i = 0; i < accountNum; i++) {
		cout << '\n';
		accountList[i]->ShowAccountInfo();
	}
}

int main()
{
	AccountHandler manager;
	manager.customNormalAccount(111, "name1", 500, 2);
	manager.customNormalAccount(112, "name2", 1000, 5);
	manager.customCreditAccount(113, "name3", 5000, 5, LEV_B);
	while(true) {
		switch(manager.ShowMenu()) {
			case CREATE:
				manager.CreateAccount();
				break;
			case DEPOSIT:
				manager.Deposit();
				break;
			case WITHDRAW:
				manager.Withdraw();
				break;
			case SHOWINFO:
				manager.ShowAccountList();
				break;
			case EXIT:
				cout << "프로그램을 종료합니다.\n";
				return 0;
			default:
				break;
		}
		putchar('\n');
	}
	return 0;
}